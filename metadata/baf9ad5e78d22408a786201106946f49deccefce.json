{"title":"[ebook]Purely functional data structures","uid":5068081,"size":3642695,"categoryP":"other","categoryS":"e_books","magnet":"?xt=urn:btih:baf9ad5e78d22408a786201106946f49deccefce&amp;dn=%5Bebook%5DPurely+functional+data+structures&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":3,"leechers":0,"uploader":"sordex","files":1,"time":1251109684,"description":"Book Details\n--------------------------------------------------------------------------------\nTitle : Purely functional data structures \nAuthor : Chris Okasaki\nPages : 225\nPublisher : Cambridge University Press\nPublication Date : 1999\nFormat : DjVu\nEbook quality : Decent\n--------------------------------------------------------------------------------\nPurely functional data structures \n--------------------------------------------------------------------------------\nMost books on data structures assume an imperative language such as C or \nC++. However, data structures for these languages do not always translate\nwell to functional languages such as Standard ML, Haskell, or Scheme. This\nbook describes data structures from the point of view of functional\nlanguages, with examples, and presents design techniques that allow\nprogrammers to develop their own functional data structures. The author\nincludes both classical data structures, such as red-black trees and\nbinomial queues, and a host of new data structures developed exclusively for\nfunctional languages. All source code is given in Standard ML and Haskell,\nand most of the programs are easily adaptable to other functional languages.\nThis handy reference for professional programmers working with functional\nlanguages can also be used as a tutorial or for self-study.\n------------------------------------------------------------------------------\nChapters\n------------------------------------------------------------------------------\n1- Introduction\n2- Persistence\n3- Some Familiar Data Structures in a Functional Setting\n4- Lazy Evaluation\n5- Fundamentals of Amortization\n6- Amortization and Persistence via Lazy Evaluation\n7- Eliminating Amortization\n8- Lazy Rebuilding\n9- Numerical Representations\n10- Data-Structural Bootstrapping\n11- Implicit Reucrsive Slowdown\n------------------------------------------------------------------------------","torrent":{"xt":"urn:btih:baf9ad5e78d22408a786201106946f49deccefce","amp;dn":"%5Bebook%5DPurely+functional+data+structures","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"baf9ad5e78d22408a786201106946f49deccefce","infoHashBuffer":{"type":"Buffer","data":[186,249,173,94,120,210,36,8,167,134,32,17,6,148,111,73,222,204,239,206]},"announce":[],"urlList":[]}}